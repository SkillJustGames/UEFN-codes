using { /Fortnite.com/Characters }
using { /Fortnite.com/Devices }
using { /Verse.org/Assets }
using { /UnrealEngine.com/Temporary/SpatialMath }
using { /UnrealEngine.com/Temporary/Diagnostics }

roaming_enemy_npc := class():

    var EnemyMesh : mesh = Assets.GetMesh("Path/To/Your/CustomMesh") # Custom mesh
    var IdleAnimation : animation_sequence = Assets.GetAnimation("Path/To/IdleAnimation")
    var RunAnimation : animation_sequence = Assets.GetAnimation("Path/To/RunAnimation")
    
    @editable
    var AttackRadius : float = 20.0  # Default attack radius in meters
    
    @editable
    var Health : int = 1000  # Health modifiable from 0 to 100000
    
    var IsAlive : logic = true  # To track enemy's alive status

    @editable
    StartPoint : vector3 = vector3{ X := 0, Y := 0, Z := 0 }  # Roaming starting point
    @editable
    EndPoint : vector3 = vector3{ X := 100, Y := 100, Z := 0 }  # Roaming end point

    var IsRoaming : logic = true  # Track if enemy is roaming

    OnBegin<override>()<suspends>: void =
        Self.InitEnemy()
        loop:
            if IsAlive:
                Self.Roam()
                Sleep(0.5)
            else:
                break

    InitEnemy() : void =
        # Initialize enemy with mesh and animations
        Self.AttachMesh(EnemyMesh)
        Self.PlayAnimation(IdleAnimation)
        
        Print("Enemy initialized with health: {Health}", Duration := 3.0)

    (Enemy : roaming_enemy_npc).Roam<suspends>():void =
        # Roam between StartPoint and EndPoint
        if IsRoaming:
            Self.MoveTo(StartPoint)
            Sleep(1.0)
            Self.MoveTo(EndPoint)
            Sleep(1.0)

    (Enemy : roaming_enemy_npc).AttackPlayer(Player : player) : void =
        if PlayerInRange(Player):
            Print("Enemy attacking player!", Duration := 2.0)
            # Logic for attack can be implemented here
            
            # Change animation to attack or run based on situation
            Self.PlayAnimation(RunAnimation)

    PlayerInRange(Player : player) : logic =
        if (Player := Player.GetFortCharacter[]):
            Distance := (Self.GetTransform().Translation - Player.GetTransform().Translation).Length()
            return Distance <= AttackRadius
        return false

    (Enemy : roaming_enemy_npc).TakeDamage(Damage : int) : void =
        set Health -= Damage
        Print("Enemy health: {Health}", Duration := 3.0)

        if Health <= 0:
            Self.Die()

    (Enemy : roaming_enemy_npc).Die() : void =
        Print("Enemy has died!", Duration := 3.0)
        IsAlive := false
        Self.SetVisibility(false)

    (Enemy : roaming_enemy_npc).MoveTo(Destination : vector3)<suspends> : void =
        Self.PlayAnimation(RunAnimation)  # Play run animation while moving
        # Simulate movement logic here (can be enhanced with navigation or pathfinding systems)
        Print("Moving to {Destination}", Duration := 2.0)
        Sleep(2.0)  # Simulate movement duration
        Self.PlayAnimation(IdleAnimation)  # Back to idle when reached
