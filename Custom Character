// Verse Script for Custom Character with Attach Blueprint, Run, Idle, Trigger Device Logic

class CustomCharacter : Entity
{
    var Mesh : blueprint
    var RunAnim : animation
    var IdleAnim : animation
    var PlayerVisible : bool = false
    var MeshAttached : bool = false

    // Constructor to initialize custom character's mesh and animations
    CustomCharacter(blueprint CharMesh, animation RunAnimation, animation IdleAnimation)
    {
        Mesh = CharMesh
        RunAnim = RunAnimation
        IdleAnim = IdleAnimation
    }

    // Function to attach the mesh to the player and make the player invisible
    func AttachMeshToPlayer(Player : Entity) : void
    {
        if not MeshAttached
        {
            // Make player model invisible
            Player.SetVisibility(false)

            // Attach custom mesh to the player
            Mesh.AttachTo(Player, "Root") // Attach to the player's root bone/socket
            MeshAttached = true

            // Start with idle animation
            PlayIdle()
        }
    }

    // Function to detach the mesh and make the player visible again
    func RemoveMeshFromPlayer(Player : Entity) : void
    {
        if MeshAttached
        {
            // Detach custom mesh
            Mesh.DetachFrom(Player)
            MeshAttached = false

            // Make player model visible again
            Player.SetVisibility(true)
        }
    }

    // Function to play the idle animation
    func PlayIdle() : void
    {
        if MeshAttached
        {
            Mesh.PlayAnimation(IdleAnim)
        }
    }

    // Function to play the run animation
    func PlayRun() : void
    {
        if MeshAttached
        {
            Mesh.PlayAnimation(RunAnim)
        }
    }

    // Function to handle the activation from a trigger device
    func ActivateFromTrigger(Player : Entity) : void
    {
        AttachMeshToPlayer(Player)
    }

    // Function to handle the deactivation from a trigger device
    func DeactivateFromTrigger(Player : Entity) : void
    {
        RemoveMeshFromPlayer(Player)
    }

    // Main tick function to control animations based on player movement
    func Tick(Player : Entity) : void
    {
        if MeshAttached
        {
            // Check if the player is moving
            if Player.IsMoving()
            {
                PlayRun()
            }
            else
            {
                PlayIdle()
            }
        }
    }
}

// Initialize the custom character with a mesh and animations
entity CustomCharacterMesh = new CustomCharacter(CharMeshBlueprint, RunAnimation, IdleAnimation)


// Trigger device logic to activate/deactivate the custom character
class TriggerDevice : Entity
{
    // Variables to track player and custom character state
    var TriggerEnabled : bool = false

    // Function to activate the custom character when triggered
    func OnTriggerEnter(Player : Entity) : void
    {
        if not TriggerEnabled
        {
            CustomCharacterMesh.ActivateFromTrigger(Player)
            TriggerEnabled = true
        }
    }

    // Function to deactivate the custom character when leaving the trigger
    func OnTriggerExit(Player : Entity) : void
    {
        if TriggerEnabled
        {
            CustomCharacterMesh.DeactivateFromTrigger(Player)
            TriggerEnabled = false
        }
    }
}

// Main function to constantly check for player movement and trigger activation
func Main() : void
{
    while (true)
    {
        var Player : Entity = GetPlayer() // Get player entity reference
        CustomCharacterMesh.Tick(Player)  // Continuously check and update animation

        // Add your logic here to detect trigger enter/exit (from the TriggerDevice class)
    }
}
