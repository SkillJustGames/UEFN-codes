using { /Fortnite.com/Devices }
using { /Fortnite.com/Characters }
using { /UnrealEngine.com/Temporary/Diagnostics }
using { /Verse.org/Simulation }

custom_character_device := class():

    var CustomMesh : mesh
    var IsActive : logic = false
    var PlayerCharacter : fort_character
    var CurrentAnimation : animation_sequence
    var Health : int

    @editable
    MaxHealth : int = 100   # Modifiable health
    @editable
    BlueprintMesh : mesh = mesh{}              # Selectable Blueprint Mesh
    @editable
    IdleAnimationSequence : cinematic_sequence_device = cinematic_sequence_device{}  # Selectable Idle Animation
    @editable
    RunAnimationSequence : cinematic_sequence_device = cinematic_sequence_device{}   # Selectable Run Animation

    @editable
    TriggerStart : trigger_device = trigger_device{}    # Start Trigger
    @editable
    TriggerStop : trigger_device = trigger_device{}     # Stop Trigger

    OnBegin<override>() : void =
        PlaySpace := GetPlayspace()
        PlaySpace.PlayerAddedEvent().Subscribe(OnPlayerAdded)
        TriggerStart.TriggerEvent().Subscribe(ActivateCustomCharacter)
        TriggerStop.TriggerEvent().Subscribe(DeactivateCustomCharacter)

    OnPlayerAdded(PlayerAgent : agent) : void =
        if (Player := player[PlayerAgent]):
            if (Character := Player.GetFortCharacter[]):
                PlayerCharacter = Character

    ActivateCustomCharacter() : void =
        if (PlayerCharacter):
            IsActive := true
            Health := MaxHealth  # Initialize health
            PlayerCharacter.SetVisibility(false)  # Hide the default character
            AttachCustomMesh()
            StartAnimationLoop()   # Start the animation loop

            Print("Custom Character Activated with Health: {Health}.")

    DeactivateCustomCharacter() : void =
        if (PlayerCharacter):
            IsActive := false
            PlayerCharacter.SetVisibility(true)  # Show the default character
            DetachCustomMesh()
            Print("Custom Character Deactivated.")

    AttachCustomMesh() : void =
        CustomMesh := BlueprintMesh
        PlayerCharacter.AttachMesh(CustomMesh)  # Attach custom mesh to player

    DetachCustomMesh() : void =
        if (CustomMesh):
            PlayerCharacter.DetachMesh(CustomMesh)  # Detach the custom mesh

    StartAnimationLoop() : void <suspends> =
        loop:
            if IsActive:
                # Check if the player is running or idle
                if (PlayerCharacter.IsMoving()):
                    CurrentAnimation := RunAnimationSequence.GetSequence()
                else:
                    CurrentAnimation := IdleAnimationSequence.GetSequence()

                # Play the selected animation
                PlayerCharacter.PlayAnimation(CurrentAnimation)

            Sleep(0.1)  # Adjust timing as necessary

    # Function to apply damage to the custom character
    ApplyDamage(DamageAmount : int) : void =
        if (IsActive and Health > 0):
            set Health -= DamageAmount
            Print("Custom Character took {DamageAmount} damage. Health remaining: {Health}.")

            if (Health <= 0):
                DestroyCustomCharacter()

    # Handle what happens when health reaches 0
    DestroyCustomCharacter() : void =
        Print("Custom Character destroyed.")
        # Make player model visible again when custom character is destroyed
        PlayerCharacter.SetVisibility(true) 
        DetachCustomMesh()  # Remove the custom mesh
        DeactivateCustomCharacter()
